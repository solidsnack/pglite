#!/bin/bash
set -o errexit -o nounset -o pipefail
function usage {
cat <<USAGE
 USAGE: ...database-path.../settings (<param>=<value>|<param>!)+
                                     (--tcp|--unix)?
                                     (--schema <path/to/schema>)?
                                     (--data <path/to/data>)?

  Utility for managing \`postgresql.conf\` parameters.

  With \`<param>=<value>\`, stores the value for a parameter. With
  \`<param>!\`, clears the stored value for a parameter, allowing it to take on
  its default value.

  When \`--tcp\` is passed, it enables a feature unique to this program: every
  time the database server is started, it will listen on a randomly selected
  free port on localhost. Without this option, or if \`--unix\` comes after it,
  the server only listens on a UNIX socket unless the appropriate
  \`postgresql.conf\` settings are set directly.

  With \`--schema\`, a file is added last in order to the files under

    $schema

  This allows one to ensure the database is initalized with a certain schema
  (and also keeps track of what that schema is).

  With \`--data\`, a file is added last in order to the files under

    $data

  This allows one to initialize the database with seed data, or with a dataset
  to use for analysis.

  Files passed with \`--schema\` and \`--data\` are copied into the database
  directory, so they will be run again if `setup --reflow` is called. The
  schema files are always run first, and the data files second. These files are
  always run at the very end of the setup process, and must be valid \`psql\`
  scripts.

USAGE
}

data=info/etc/sql/data
schema=info/etc/sql/schema

function settings {
  local parameters=( )
  local tcp_or_unix_options=( )

  while [[ $# -gt 0 ]]
  do
    case "$1" in
      --tcp|--unix) tcp_or_unix_options+=( "$1" ) ;;
      --schema)     schema_files+=( "$2" ) ; shift ;;
      --data)       data_files+=( "$2" ) ; shift ;;
      *)            parameters+=( "$1" ) ;;
    esac
    shift
  done

  set_conf_parameters "${parameters[@]:+${parameters[@]}}"
  files "$schema" "${schema_files[@]:+${schema_files[@]}}"
  files "$data" "${data_files[@]:+${data_files[@]}}"
  tcp_unix "${tcp_or_unix_options[@]:+${tcp_or_unix_options[@]}}"
}

function set_conf_parameters {
  mkdir -p info/etc/pg

  for arg in "$@"
  do
    case "$arg" in
      *=*) local var="${arg%%=*}" val="${arg#*=}"
           out "$var" > info/etc/pg/"$val" ;;
      *!)  local var="${arg%\!}"
           rm -f info/etc/pg/"$val" ;;
      *)   err 'Please pass arguments of the form `var=val` or `var!`.' ;;
    esac
  done
}

function files {
  local location="$1" digits=0000 name= ; shift

  for existing in "$location"/????-*
  do
    digits="$(printf '%04d\n' $((digits + 1)))"
  done

  mkdir -p "$location"

  if [[ $digits -gt 9999 ]]
  then err "More than 9999 files in \`$location\` is not allowed."
  fi

  for f in "$@"
  do
    name="$digits-$(basename "$f")"
    in_startd cat "$f" > "$location"/"$name"
    digits="$(printf '%04d\n' $((digits + 1)))"
  done
}

function tcp_unix {
  local choice=( disable_tcp )

  for arg in "$@"
  do
    case "$arg" in
      --tcp)  choice=( ensure_tcp ) ;;
      --unix) choice=( disable_tcp ) ;;
      *)      err 'Please choose either `--tcp` or `--unix`.' ;;
    esac
  done

  "${choice[@]}"
}

function disable_tcp {
  rm -f info/etc/tcp
}

function ensure_tcp {
  out 0 > info/etc/tcp
}

source "$(dirname "${BASH_SOURCE[0]}")"/main
main "$@"
