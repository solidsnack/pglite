#!/bin/bash
set -o errexit -o nounset -o pipefail
function usage {
cat <<USAGE
 USAGE: ...database-path.../sql (--errexit)? <psql-arguments>
        ...database-path.../sql (--errexit)? --admin <psql-arguments>

  Connect to the database server, starting it if necessary. Any arguments are
  passed directly to \`psql\`.

  If \`--admin\` is passed, connects to the database with a higher privilege
  level.

  If \`--errexit\` is passed, it is equivalent to setting \`ON_ERROR_STOP\`:
  the first SQL error will cause the SQL interpreter to exit with an error,
  instead of continuing on with the other (likely failing) commands.

  If this task is the only connection, the database server will shutdown when
  it completes.

USAGE
}

errexit=( -v ON_ERROR_STOP=on )

function sql {
  local url= admin=false psql_args=( )

  trap finalize EXIT
  ./start

  while [[ $# -gt 0 ]]
  do
    case "$1" in
      --admin)   admin=true ; shift ;;
      --errexit) psql_args+=( "${errexit[@]}" ) ; shift ;;
      *)         break ;;
    esac
  done

  if "$admin"
  then url="$(./url --admin)"
  else url="$(./url)"
  fi

  psql_args+=( "$@" )

  ( exec psql "$url" "${psql_args[@]:+${psql_args[@]}}" )
}

function finalize {
  local code=$?
  ./stop -W -m smart || true
  exit $code
}

source "$(dirname "${BASH_SOURCE[0]}")"/main
main "$@"
