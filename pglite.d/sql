#!/bin/bash
set -o errexit -o nounset -o pipefail
function usage {
cat <<USAGE
 USAGE: ...database-path.../sql (--err-ok)? <psql-arguments>
        ...database-path.../sql (--err-ok)? --admin <psql-arguments>

  Connect to the database server, starting it if necessary. Any arguments are
  passed directly to \`psql\`.

  If \`--admin\` is passed, connects to the database with a higher privilege
  level.

  If \`--err-ok\` is passed, the first SQL error will not cause the SQL
  interpreter to exit with an error. Instead, it will continue on with the
  remaining (potentially failing) commands. This is equivalent to (and is
  implemented by) disabling \`ON_ERROR_STOP\`.

  If this task is the only connection, the database server will shutdown when
  it completes.

USAGE
}

errexit=( -v ON_ERROR_STOP=on )

function sql {
  local url= admin=false err_ok=false psql_args=( )

  trap finalize EXIT
  ./start

  while [[ $# -gt 0 ]]
  do
    case "$1" in
      --admin)  admin=true ; shift ;;
      --err-ok) err_ok=true ; shift ;;
      *)        break ;;
    esac
  done

  if ! "$err_ok"
  then psql_args+=( "${errexit[@]}" )
  fi

  if "$admin"
  then url="$(./url --admin)"
  else url="$(./url)"
  fi

  psql_args+=( "$@" )

  ( exec psql "$url" "${psql_args[@]:+${psql_args[@]}}" )
}

function finalize {
  local code=$?
  ./stop -W -m smart || true
  exit $code
}

source "$(dirname "${BASH_SOURCE[0]}")"/main
main "$@"
